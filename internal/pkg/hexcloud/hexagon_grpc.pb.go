// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hexcloud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HexagonServiceClient is the client API for HexagonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HexagonServiceClient interface {
	RepoAddHexagons(ctx context.Context, in *HexRefList, opts ...grpc.CallOption) (*Result, error)
	RepoDelHexagons(ctx context.Context, in *HexRefList, opts ...grpc.CallOption) (*Result, error)
	HexagonPlace(ctx context.Context, in *Hex, opts ...grpc.CallOption) (*Result, error)
	HexagonGet(ctx context.Context, in *HexagonGetRequest, opts ...grpc.CallOption) (*HexList, error)
	HexagonRemove(ctx context.Context, in *HexList, opts ...grpc.CallOption) (*Result, error)
	HexagonInfo(ctx context.Context, in *Hex, opts ...grpc.CallOption) (*Hex, error)
	GetStatusServer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error)
	GetStatusStorage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error)
	GetStatusClients(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error)
}

type hexagonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHexagonServiceClient(cc grpc.ClientConnInterface) HexagonServiceClient {
	return &hexagonServiceClient{cc}
}

func (c *hexagonServiceClient) RepoAddHexagons(ctx context.Context, in *HexRefList, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/endpoints.hexworld.hexcloud.HexagonService/RepoAddHexagons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexagonServiceClient) RepoDelHexagons(ctx context.Context, in *HexRefList, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/endpoints.hexworld.hexcloud.HexagonService/RepoDelHexagons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexagonServiceClient) HexagonPlace(ctx context.Context, in *Hex, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/endpoints.hexworld.hexcloud.HexagonService/HexagonPlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexagonServiceClient) HexagonGet(ctx context.Context, in *HexagonGetRequest, opts ...grpc.CallOption) (*HexList, error) {
	out := new(HexList)
	err := c.cc.Invoke(ctx, "/endpoints.hexworld.hexcloud.HexagonService/HexagonGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexagonServiceClient) HexagonRemove(ctx context.Context, in *HexList, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/endpoints.hexworld.hexcloud.HexagonService/HexagonRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexagonServiceClient) HexagonInfo(ctx context.Context, in *Hex, opts ...grpc.CallOption) (*Hex, error) {
	out := new(Hex)
	err := c.cc.Invoke(ctx, "/endpoints.hexworld.hexcloud.HexagonService/HexagonInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexagonServiceClient) GetStatusServer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/endpoints.hexworld.hexcloud.HexagonService/GetStatusServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexagonServiceClient) GetStatusStorage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/endpoints.hexworld.hexcloud.HexagonService/GetStatusStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexagonServiceClient) GetStatusClients(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/endpoints.hexworld.hexcloud.HexagonService/GetStatusClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HexagonServiceServer is the server API for HexagonService service.
// All implementations must embed UnimplementedHexagonServiceServer
// for forward compatibility
type HexagonServiceServer interface {
	RepoAddHexagons(context.Context, *HexRefList) (*Result, error)
	RepoDelHexagons(context.Context, *HexRefList) (*Result, error)
	HexagonPlace(context.Context, *Hex) (*Result, error)
	HexagonGet(context.Context, *HexagonGetRequest) (*HexList, error)
	HexagonRemove(context.Context, *HexList) (*Result, error)
	HexagonInfo(context.Context, *Hex) (*Hex, error)
	GetStatusServer(context.Context, *Empty) (*Status, error)
	GetStatusStorage(context.Context, *Empty) (*Status, error)
	GetStatusClients(context.Context, *Empty) (*Status, error)
	mustEmbedUnimplementedHexagonServiceServer()
}

// UnimplementedHexagonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHexagonServiceServer struct {
}

func (UnimplementedHexagonServiceServer) RepoAddHexagons(context.Context, *HexRefList) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepoAddHexagons not implemented")
}
func (UnimplementedHexagonServiceServer) RepoDelHexagons(context.Context, *HexRefList) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepoDelHexagons not implemented")
}
func (UnimplementedHexagonServiceServer) HexagonPlace(context.Context, *Hex) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HexagonPlace not implemented")
}
func (UnimplementedHexagonServiceServer) HexagonGet(context.Context, *HexagonGetRequest) (*HexList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HexagonGet not implemented")
}
func (UnimplementedHexagonServiceServer) HexagonRemove(context.Context, *HexList) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HexagonRemove not implemented")
}
func (UnimplementedHexagonServiceServer) HexagonInfo(context.Context, *Hex) (*Hex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HexagonInfo not implemented")
}
func (UnimplementedHexagonServiceServer) GetStatusServer(context.Context, *Empty) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusServer not implemented")
}
func (UnimplementedHexagonServiceServer) GetStatusStorage(context.Context, *Empty) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusStorage not implemented")
}
func (UnimplementedHexagonServiceServer) GetStatusClients(context.Context, *Empty) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusClients not implemented")
}
func (UnimplementedHexagonServiceServer) mustEmbedUnimplementedHexagonServiceServer() {}

// UnsafeHexagonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HexagonServiceServer will
// result in compilation errors.
type UnsafeHexagonServiceServer interface {
	mustEmbedUnimplementedHexagonServiceServer()
}

func RegisterHexagonServiceServer(s grpc.ServiceRegistrar, srv HexagonServiceServer) {
	s.RegisterService(&HexagonService_ServiceDesc, srv)
}

func _HexagonService_RepoAddHexagons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HexRefList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexagonServiceServer).RepoAddHexagons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/endpoints.hexworld.hexcloud.HexagonService/RepoAddHexagons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexagonServiceServer).RepoAddHexagons(ctx, req.(*HexRefList))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexagonService_RepoDelHexagons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HexRefList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexagonServiceServer).RepoDelHexagons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/endpoints.hexworld.hexcloud.HexagonService/RepoDelHexagons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexagonServiceServer).RepoDelHexagons(ctx, req.(*HexRefList))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexagonService_HexagonPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexagonServiceServer).HexagonPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/endpoints.hexworld.hexcloud.HexagonService/HexagonPlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexagonServiceServer).HexagonPlace(ctx, req.(*Hex))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexagonService_HexagonGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HexagonGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexagonServiceServer).HexagonGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/endpoints.hexworld.hexcloud.HexagonService/HexagonGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexagonServiceServer).HexagonGet(ctx, req.(*HexagonGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexagonService_HexagonRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HexList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexagonServiceServer).HexagonRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/endpoints.hexworld.hexcloud.HexagonService/HexagonRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexagonServiceServer).HexagonRemove(ctx, req.(*HexList))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexagonService_HexagonInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexagonServiceServer).HexagonInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/endpoints.hexworld.hexcloud.HexagonService/HexagonInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexagonServiceServer).HexagonInfo(ctx, req.(*Hex))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexagonService_GetStatusServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexagonServiceServer).GetStatusServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/endpoints.hexworld.hexcloud.HexagonService/GetStatusServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexagonServiceServer).GetStatusServer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexagonService_GetStatusStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexagonServiceServer).GetStatusStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/endpoints.hexworld.hexcloud.HexagonService/GetStatusStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexagonServiceServer).GetStatusStorage(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexagonService_GetStatusClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexagonServiceServer).GetStatusClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/endpoints.hexworld.hexcloud.HexagonService/GetStatusClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexagonServiceServer).GetStatusClients(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HexagonService_ServiceDesc is the grpc.ServiceDesc for HexagonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HexagonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "endpoints.hexworld.hexcloud.HexagonService",
	HandlerType: (*HexagonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RepoAddHexagons",
			Handler:    _HexagonService_RepoAddHexagons_Handler,
		},
		{
			MethodName: "RepoDelHexagons",
			Handler:    _HexagonService_RepoDelHexagons_Handler,
		},
		{
			MethodName: "HexagonPlace",
			Handler:    _HexagonService_HexagonPlace_Handler,
		},
		{
			MethodName: "HexagonGet",
			Handler:    _HexagonService_HexagonGet_Handler,
		},
		{
			MethodName: "HexagonRemove",
			Handler:    _HexagonService_HexagonRemove_Handler,
		},
		{
			MethodName: "HexagonInfo",
			Handler:    _HexagonService_HexagonInfo_Handler,
		},
		{
			MethodName: "GetStatusServer",
			Handler:    _HexagonService_GetStatusServer_Handler,
		},
		{
			MethodName: "GetStatusStorage",
			Handler:    _HexagonService_GetStatusStorage_Handler,
		},
		{
			MethodName: "GetStatusClients",
			Handler:    _HexagonService_GetStatusClients_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/hexagon.proto",
}
